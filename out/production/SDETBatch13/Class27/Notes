Collections Framework:

Collections framework is just a collection of interfaces and classes that have many methods to store and manipulate
real life day to day data.

Why should we use Collections Framework:
Collections Framework contains the classes that have pre-built methods to store and manipulate the data. These methods
are battle tested (meaning very well tested and proven that we can use it in a production environment).

How can we use Collections Framework:
They are same classes just like any other class in Java. We create the object of the class and start calling the
methods. We just need to make sure we take care of the diamond operator <> whose objects we will be storing inside these
classes. For example Strings and ArrayList the syntax is ArrayList<String> objName=new ArrayList<>();

What are Wrapper Classes:
They are special classes built to work with collections framework which are replica of primitive data types but the
are classes means we can use them just like any other class we can have in methods.

Boxing and UnBoxing in Wrapper Classes:
When we convert primitive date type like int to non primitive wrapper class like Integer we call it boxing. This
conversion can happen automatically and can also call it explicit methods to convert primitives to non primitives.
When it is done automatically we call it AutoBoxing. When autoboxing occurs we just assign the data and it's converted
automatically while in simple we need to call a method to convert it.

Downsides (that aren't too bad):
1) We need to use the wrapper classes with collections framework.
2) Int num vs integer num Wrapper classes occupy 4 times more memory as compared to primitive bit as a tester we don't
need to worry too much about these wrapper classes.

=======================================================================================================================
List is the 1st interface that we will be discussing from the collections framework:
List:
1) We can store duplicate data.
2) insertion order is maintained.

ArrayList:
LinkedListClass:
joining in a mint
Difference between ArrayList and LinkedList

ArrayList:
Upside:     Retrieval(get operation) of elements is super Fast
DownSide:   Adding elements in the middle or start will be very expensive.

LinkedList:
Upside:     Whenever we have to insert the data randomly not at the last index we should be using LinkedList
DownSide:   Retrieval is super super slow if the list is big

ArrayList=used to retrieve elements (when using multiple times)
LinkedList=to manipulate elements





























